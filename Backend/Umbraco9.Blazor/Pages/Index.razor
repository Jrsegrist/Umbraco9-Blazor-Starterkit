@page "/"
@implements IDisposable
@using Microsoft.Extensions.Logging
@using NPoco.fastJSON
@using Umbraco9.Core.Models.Pages
@using Umbraco9.Core.Services
@inject PersistentComponentState _applicationState
@inject IContentDeliveryService _contentDeliveryService
@inject ILogger<Index> _logger

<ComponentList Elements="_contentData?.Elements" />

@code
{
    private HomepageModel _contentData;

    private PersistingComponentStateSubscription _persistingSubscription;

    // See - https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/built-in/persist-component-state?view=aspnetcore-6.0 
    // For more information on persisting data during SSR so we do not see a flash of content where the data is loaded on the server 
    // then a second time when the client app loads and binds to the ssr content.

    protected override async Task OnInitializedAsync()
    {
        _persistingSubscription = _applicationState.RegisterOnPersisting(PersistData);

        try
        {
            // Due to an issue where the ApplicationState does not support deserializing 
            // interfaces, we are serializing the data using JSON.ToNiceJSON instead as a work around
            if (!_applicationState.TryTakeFromJson<string>("fetchdata", out var restored))
            {
                _contentData = await _contentDeliveryService.GetPageOfType<HomepageModel>("/");
            }
            else
            {
                _contentData = JSON.ToObject<HomepageModel>(restored!);
            }
        }
        catch(Exception ex)
        {
            _logger.LogError(ex, "Error loading page data");            
        }
    }

    private Task PersistData()
    {
        // Serialize the data in a format that will rehydrate the IElement interfaces properly
        var prettyJson = JSON.ToNiceJSON(_contentData);
        _applicationState.PersistAsJson("fetchdata", prettyJson);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _persistingSubscription.Dispose();
    }

}
